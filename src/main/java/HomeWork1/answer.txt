----> Определение
ERP (англ. Enterprise Resource Planning, планирование ресурсов предприятия) — организационная стратегия интеграции производства и операций,
управления трудовыми ресурсами, финансового менеджмента и управления активами, ориентированная на непрерывную балансировку
и оптимизацию ресурсов предприятия посредством специализированного интегрированного пакета прикладного программного обеспечения,
обеспечивающего общую модель данных и процессов для всех сфер деятельности.
ERP-система — конкретный программный пакет, реализующий стратегию ERP.

----> Архитектура ERP приложения
Для такой сложной и комплексной системы потребуется фундамент под стать. Я предлагаю использовать Компонентную архитектуру,
которая уделяет своё основноевнимание разложению дизайна на отдельные функциональные или логические компоненты,
предоставляющие четко определенные интерфейсы, содержащие методы, события и свойства. В данном случае обеспечивается
более высокий уровень абстракции, чем при объектно-ориентированной разработке. В основе такой архитектуры лежат компоненты
как програмные объекты, предназначенные для взаимодействия друг с другом, инкапсулирующие определенные функциональные возможности
или набор функциональных возможностей. Единично сам компонент имеет явно определенный интерфейс и соответствует рекомендованному
поведению, общему для всех компонентов в архитектуре. Программный компонент может быть определен как единица композиции
с указанным в контракте интерфейсом и только с явными контекстными зависимостями.
Таким образом, программный компонент может быть развернут независимо и может быть составлен третьими лицами.
Компонентную архитектуру выделяют следующие преимущества.
Гарантирует получение архитектурных компонентов из проблемной области которые имеют значение для всех заинтересованных сторон,
которые рассматривают архитектурную модель.
Извлекает сущности бизнес-процессов, которые могут существовать независимо, без какой-либо связанной зависимости от других сущностей.
Признает и обнаруживает эти независимые объекты в качестве новых компонентов.
Используются имена компонентов инфраструктуры, которые отражают их значение для конкретной реализации.
Моделирует любые зависимости слева направо и наследование сверху (базовый класс) и снизу (производные классы).
Моделирует любые зависимости компонентов как интерфейсы, а не представляйте их как прямую зависимость между компонентами.
Простота развертывания. По мере появления новых совместимых версий становится проще заменить существующие версии,
не влияя на другие компоненты или систему в целом.
Снижение затрат — использование сторонних компонентов позволяет распределить затраты на разработку и обслуживание.
Простота разработки — Компоненты реализуют хорошо известные интерфейсы, чтобы обеспечить определенную функциональность,
позволяя разработку, не затрагивая другие части системы.
Многоразовое использование — использование повторно используемых компонентов означает,
что их можно использовать для распределения затрат на разработку и обслуживание по нескольким приложениям или системам.
Модификация технической сложности — компонент изменяет сложность посредством использования контейнера компонента и его сервисов.
Надежность. Повышается общая надежность системы, поскольку надежность каждого отдельного компонента повышает надежность всей системы за счет повторного использования.
Обслуживание и развитие системы — Легко изменить и обновить реализацию, не затрагивая остальную часть системы.
Независимость — независимость и гибкость подключения компонентов. Самостоятельная разработка компонентов по разным группам параллельно.
Производительность для разработки программного обеспечения и будущей разработки программного обеспечения.