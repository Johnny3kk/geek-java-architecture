Вопросы:
1. Провести анализ своего проекта на использование антипаттернов.
Какие антипаттерны удалось обнаружить?
2. Продумать методы устранения.

Ответы:
1.
Для примера в рассмотрении я взял ранее разработанное MVC-приложение онлайн-магазина. Всё было сделано по учебнику: в модели
бизнес-логика от репазитория, в контроллере - непосредственно контроллер, в представлении - старнички html. Мне сложно
назвать определённый антипаттерн в такой реализации, но видны определённые недосмотры. Например то, как за всё происходящее
отдувается контроллер. То как несколько запросов могут накинуться на сущность из области репозитория. Так у меня появилось впечатление,
что я создал маленького божка контроллера и непрекрытый класс репозитория.

2.
Ответ на мой запрос по улучшению работы моего MVC-приложения уже давно описан и применён. Заключается он в создании
дополнительнительного сервисного слоя, который содержит в себе необходимую бизнес-логику, размещённую в классах Service,
которые взаимодействуют с классами репрезентациями (Repr) сущностей репозитория. Соответственно в контроллере, вместо репозитория,
создаём экземпляр уже свежеиспечённого класса Service. На мой студенческий взгляд, при такой реализации не только снимаются
вышеуказанные слабости в реализации, но также становится легко осуществить логику доступа сразу к нескольким сущностям области
репозитория, что в принципе является при менеджменте категорий условных продуктов в онлайн-магазине.